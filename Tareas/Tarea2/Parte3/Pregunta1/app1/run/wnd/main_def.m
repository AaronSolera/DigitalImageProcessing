## -*- texinfo -*-
## @deftypefn  {} {} dummy()
##
## This is a dummy function documentation. This file have a lot functions
## and each one have a little documentation. This text is to avoid a warning when
## install this file as part of package.
## @end deftypefn
##
## Set the graphics toolkit and force read this file as script file (not a function file).
##
graphics_toolkit qt;
##


##
##
## Begin callbacks definitions 
##

## @deftypefn  {} {} Button_1_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of Button_1 control.
##
## @end deftypefn
function Button_1_doIt(src, data, main)

% El código que se indique aquí será ejecutado cuando el usuario presione en el botón.
% Por defecto, todos los eventos están desactivados, para activarlos debe activar
% la propiedad 'generateCallback' desde el editor de propiedades

global A file path

[file, path] = uigetfile ({'*.gif;*.png;*.jpg', 'Supported Picture Formats'}); %Ventana de dialogo para seleccionar la imagen
text=fullfile(path, file); %Direccion donde se encuentra la imagen

A = imread(text);
axes(main.Image_1)
imshow(A)
end

## @deftypefn  {} {} Button_2_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of Button_2 control.
##
## @end deftypefn
function Button_2_doIt(src, data, main)

% El código que se indique aquí será ejecutado cuando el usuario presione en el botón.
% Por defecto, todos los eventos están desactivados, para activarlos debe activar
% la propiedad 'generateCallback' desde el editor de propiedades

global A

filter_id = get(main.ComboBox_2, 'Value');

switch (filter_id)
	case 1
   		% Median Filter function
  	case 2
   		% Fast Median Filter Approximation function
  	case 3
   		%  IAMFA-I function
  	otherwise
   		% Median Filter function
endswitch

axes(main.Image_2)
imshow(A)
end

## @deftypefn  {} {} Button_3_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of Button_3 control.
##
## @end deftypefn
function Button_3_doIt(src, data, main)

% El código que se indique aquí será ejecutado cuando el usuario presione en el botón.
% Por defecto, todos los eventos están desactivados, para activarlos debe activar
% la propiedad 'generateCallback' desde el editor de propiedades

global A file path;

display(["The restored image has been saved at " path "filtered_" file]);
imwrite(A, [path "filtered_" file]);
end

## @deftypefn  {} {} Button_10_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of Button_10 control.
##
## @end deftypefn
function Button_10_doIt(src, data, main)

% El código que se indique aquí será ejecutado cuando el usuario presione en el botón.
% Por defecto, todos los eventos están desactivados, para activarlos debe activar
% la propiedad 'generateCallback' desde el editor de propiedades

figure
info = imread("img/info_app1.png");
imshow(info);
end

 
## @deftypefn  {} {@var{ret} = } show_main()
##
## Create windows controls over a figure, link controls with callbacks and return 
## a window struct representation.
##
## @end deftypefn
function ret = show_main()
  _scrSize = get(0, "screensize");
  _xPos = (_scrSize(3) - 1110)/2;
  _yPos = (_scrSize(4) - 529)/2;
   main = figure ( ... 
	'Color', [0.937 0.937 0.937], ...
	'Position', [_xPos _yPos 1110 529], ...
	'resize', 'off', ...
	'windowstyle', 'normal', ...
	'MenuBar', 'none');
	 set(main, 'visible', 'off');
  Button_1 = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [65 72 90 27], ... 
	'String', 'Load Image', ... 
	'TooltipString', '');
  Image_1 = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [65 125 450 319]);
  Label_1 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [65 445 449 21], ... 
	'String', 'Original Image', ... 
	'TooltipString', '');
  Image_2 = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [580 126 449 318]);
  ComboBox_2 = uicontrol( ...
	'parent',main, ... 
	'Style','popupmenu', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [170 33 345 26], ... 
	'String', 'MedianFilter|FastMedianFilterApproximation|IAMFA-I', ... 
	'TooltipString', '');
  Button_2 = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [65 33 90 26], ... 
	'String', 'Apply', ... 
	'TooltipString', '');
  Label_3 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [577 447 452 17], ... 
	'String', 'Filtered Image', ... 
	'TooltipString', '');
  Button_3 = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [580 71 90 28], ... 
	'String', 'Save Image', ... 
	'TooltipString', '');
  Button_10 = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 30, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [1045 476 47 43], ... 
	'String', '?', ... 
	'TooltipString', '');

  main = struct( ...
      'figure', main, ...
      'Button_1', Button_1, ...
      'Image_1', Image_1, ...
      'Label_1', Label_1, ...
      'Image_2', Image_2, ...
      'ComboBox_2', ComboBox_2, ...
      'Button_2', Button_2, ...
      'Label_3', Label_3, ...
      'Button_3', Button_3, ...
      'Button_10', Button_10);


  set (Button_1, 'callback', {@Button_1_doIt, main});
  set (Button_2, 'callback', {@Button_2_doIt, main});
  set (Button_3, 'callback', {@Button_3_doIt, main});
  set (Button_10, 'callback', {@Button_10_doIt, main});
  dlg = struct(main);

  set(main.figure, 'visible', 'on');

%
% El código fuente escrito aquí será ejecutado cuando
% la ventana se haga visible. Funciona como el evento 'onLoad' de otros lenguajes.
%

  ret = main;
end

