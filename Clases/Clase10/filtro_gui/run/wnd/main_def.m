## -*- texinfo -*-
## @deftypefn  {} {} dummy()
##
## This is a dummy function documentation. This file have a lot functions
## and each one have a little documentation. This text is to avoid a warning when
## install this file as part of package.
## @end deftypefn
##
## Set the graphics toolkit and force read this file as script file (not a function file).
##
graphics_toolkit qt;
##


##
##
## Begin callbacks definitions 
##

## @deftypefn  {} {} Button_1_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of Button_1 control.
##
## @end deftypefn
function Button_1_doIt(src, data, main)

% El código que se indique aquí será ejecutado cuando el usuario presione en el botón.
% Por defecto, todos los eventos están desactivados, para activarlos debe activar
% la propiedad 'generateCallback' desde el editor de propiedades

[file,path] = uigetfile ({'*.gif;*.png;*.jpg', 'Supported Picture Formats'}); %Ventana de dialogo para seleccionar la imagen
text=fullfile(path, file); %Direccion donde se encuentra la imagen

global A=imread(text);
axes(main.Image_1)
imshow(A)

axes(main.Image_2)
imshow(A)
end

## @deftypefn  {} {} CheckBox_4_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of CheckBox_4 control.
##
## @end deftypefn
function CheckBox_4_doIt(src, data, main)

B=filtro_general(A, "gaussiano5"); %La filtro_general negativo la implementamos en Octave

axes(main.Image_2)
imshow(B)
end

## @deftypefn  {} {} CheckBox_5_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of CheckBox_5 control.
##
## @end deftypefn
function CheckBox_5_doIt(src, data, main)

% Aplicar el filtro promedio a A
B=filtro_general(A, "promedio"); %La filtro_general negativo la implementamos en Octave

axes(main.Image_2)
imshow(B)
end

## @deftypefn  {} {} CheckBox_6_doIt (@var{src}, @var{data}, @var{main})
##
## Define a callback for default action of CheckBox_6 control.
##
## @end deftypefn
function CheckBox_6_doIt(src, data, main)

% Aplicar el filtro gaussiano a A
B=filtro_general(A, "gaussiano"); %La filtro_general negativo la implementamos en Octave

axes(main.Image_2)
imshow(B)
end

 
## @deftypefn  {} {@var{ret} = } show_main()
##
## Create windows controls over a figure, link controls with callbacks and return 
## a window struct representation.
##
## @end deftypefn
function ret = show_main()
  _scrSize = get(0, "screensize");
  _xPos = (_scrSize(3) - 1050)/2;
  _yPos = (_scrSize(4) - 447)/2;
   main = figure ( ... 
	'Color', [0.937 0.937 0.937], ...
	'Position', [_xPos _yPos 1050 447], ...
	'resize', 'off', ...
	'windowstyle', 'normal', ...
	'MenuBar', 'none');
	 set(main, 'visible', 'off');
  Image_1 = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [290 108 322 249]);
  Image_2 = axes( ...
	'Units', 'pixels', ... 
	'parent',main, ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'Position', [675 108 320 249]);
  Label_1 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [290 356 322 21], ... 
	'String', 'Imagen Original', ... 
	'TooltipString', '');
  Label_2 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [672 360 322 17], ... 
	'String', 'Imagen con Filtro', ... 
	'TooltipString', '');
  Button_1 = uicontrol( ...
	'parent',main, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [70 332 111 45], ... 
	'String', 'Cargar imagen', ... 
	'TooltipString', '');
  Label_3 = uicontrol( ...
	'parent',main, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'bold', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'center', ... 
	'Position', [75 185 128 20], ... 
	'String', 'Opciones', ... 
	'TooltipString', '');
  CheckBox_4 = uicontrol( ...
	'parent',main, ... 
	'Style','checkbox', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [75 109 129 23], ... 
	'String', 'Gaussiano (5x5)', ... 
	'TooltipString', '', ... 
	'Min', 0, 'Max', 1, 'Value', 0);
  CheckBox_5 = uicontrol( ...
	'parent',main, ... 
	'Style','checkbox', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [75 159 129 23], ... 
	'String', 'Promedio', ... 
	'TooltipString', '', ... 
	'Min', 0, 'Max', 1, 'Value', 0);
  CheckBox_6 = uicontrol( ...
	'parent',main, ... 
	'Style','checkbox', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.937 0.937], ... 
	'FontAngle', 'normal', ... 
	'FontName', 'Ubuntu', ... 
	'FontSize', 11, 'FontUnits', 'points', ... 
	'FontWeight', 'normal', ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [75 134 130 23], ... 
	'String', 'Gaussiano (3x3)', ... 
	'TooltipString', '', ... 
	'Min', 0, 'Max', 1, 'Value', 0);

  main = struct( ...
      'figure', main, ...
      'Image_1', Image_1, ...
      'Image_2', Image_2, ...
      'Label_1', Label_1, ...
      'Label_2', Label_2, ...
      'Button_1', Button_1, ...
      'Label_3', Label_3, ...
      'CheckBox_4', CheckBox_4, ...
      'CheckBox_5', CheckBox_5, ...
      'CheckBox_6', CheckBox_6);


  set (Button_1, 'callback', {@Button_1_doIt, main});
  set (CheckBox_4, 'callback', {@CheckBox_4_doIt, main});
  set (CheckBox_5, 'callback', {@CheckBox_5_doIt, main});
  set (CheckBox_6, 'callback', {@CheckBox_6_doIt, main});
  dlg = struct(main);

  set(main.figure, 'visible', 'on');

%
% El código fuente escrito aquí será ejecutado cuando
% la ventana se haga visible. Funciona como el evento 'onLoad' de otros lenguajes.
%

  ret = main;
end

